@page "/products/crud/{ProductID:int?}"
@using WestWindSystem.Entities
@using WestWindSystem.BLL

<PageTitle>Product Maintenance</PageTitle>

<link rel="stylesheet"
href="https://cdn.jsdelivr.net/npm/@@picocss/pico@@2/css/pico.min.css">

<h3>Product Maintenance</h3>

@if(feedback.Length > 0) 
{
    <div class="alert alert-info">
        <p>@feedback</p>
    </div>
}

@if(errors.Count > 0)
{
    <div class="alert alert-danger">
        <p>Please fix the following issues:</p>
        <ul>
            @foreach(var currentError in errors)
            {
                <li>@currentError</li>
            }
        </ul>
    </div>
}

<EditForm EditContext="editContext" OnValidSubmit="SaveProduct" FormName="ProductCrudForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <label>
        ProductID (Read Only)
        <InputNumber @bind-Value="Model!.ProductID" disabled />
    </label>
    <label >
        Product Name
        <InputText @bind-Value="Model!.ProductName" />
        <ValidationMessage For="() => Model!.ProductName" />
    </label>

    <label >
        Supplier
        <InputSelect @bind-Value="Model!.SupplierID">
            <option value="0">Select a supplier...</option>
            @foreach (var currentSupplier in Suppliers)
            {
                <option value="@currentSupplier.SupplierID"
                selected="@(currentSupplier.SupplierID == Model!.SupplierID)">
                    @currentSupplier.CompanyName
                </option>
            }
        </InputSelect>
        <ValidationMessage For="() => Model!.SupplierID" />
    </label>

    <label>
        Category
        <InputSelect @bind-Value="Model!.CategoryID">
            <option value="0">Select a category...</option>
            @foreach (var currentCategory in Categories)
            {
                <option value="@currentCategory.CategoryID"
                selected="@(currentCategory.CategoryID == Model!.CategoryID)">
                    @currentCategory.CategoryName
                </option>
            }
        </InputSelect>
        <ValidationMessage For="() => Model!.SupplierID" />
    </label>

    <label>
        Quantity Per Unit
        <InputText @bind-Value="Model!.QuantityPerUnit" />
        <ValidationMessage For="() => Model!.QuantityPerUnit" />
    </label>

    <label>
        Minimum Order Quantity
        <InputNumber @bind-Value="Model!.MinimumOrderQuantity" />
        <ValidationMessage For="() => Model!.MinimumOrderQuantity" />
    </label>

    <label >
        Unit Price
        <InputNumber  @bind-Value="Model!.UnitPrice" />
        <ValidationMessage For="() => Model!.UnitPrice" />
    </label>

    <label>
        Units On Order
        <InputNumber @bind-Value="Model!.UnitsOnOrder" />
        <ValidationMessage For="() => Model!.UnitsOnOrder" />
    </label>

    <fieldset>
        <legend>Discontinued:</legend>
        <label>
            <InputCheckbox @bind-Value="Model!.Discontinued" disabled />
            Is Discontinued
        </label>
    </fieldset>


    <div class="grid">
        @if(Model.ProductID > 0)
        {
            <button type="submit">Update</button>

            <button type="button" @onclick="DeleteProduct">
                @(Model.Discontinued ? "Reactivate Product" : "Discontinue Product")
            </button>

            <button type="button" @onclick="CancelEdit">Cancel</button>

        }
        else
        {
            <button type="submit">Add</button>
            <button type="button" @onclick="ClearForm">Clear Form</button>
        }
    </div>


</EditForm>

@code {
    [Parameter]
    public int? ProductID { get; set; }

    // The current Product to add, edit/update, or to delete.
    [SupplyParameterFromForm]
    private Product? Model { get; set; }

    // For populating the options to select a product category.
    private List<Category> Categories = [];
    // For populating the options to select a product supplier
    private List<Supplier> Suppliers = [];

    private EditContext? editContext;

    private ValidationMessageStore? messageStore;

    private string feedback = "";
    private List<string> errors = [];
    private bool isClearing = false;

    #region BLL/NavigationManager/IJSRuntime dependencies
    [Inject]
    private NavigationManager? CurrentNavigationManager { get; set; }

    [Inject]
    private IJSRuntime? CurrentJSRuntime { get; set; }

    [Inject]
    private ProductService? CurrentProductServices { get; set; }

    [Inject]
    private CategoryService?  CurrentCategoryServices { get; set; }

    [Inject]
    private SupplierService? CurrentSupplierServices { get; set; }
    #endregion

    protected override void OnInitialized()
    {
        try 
        {
            Suppliers = CurrentSupplierServices!.GetAll();
            Categories = CurrentCategoryServices!.Category_GetList();
        }
        catch(Exception ex) 
        {
            errors.Add(ex.Message);
        }
        if (ProductID.HasValue)
        {
            try 
            {
                Model = CurrentProductServices!.FindProductById(ProductID.Value);
            }
            catch(Exception ex)
            {
                Model = new();
                errors.Add(ex.Message);
            }
        }
        else
        {
            Model = new();
        }

        editContext = new(Model!);
        editContext.OnValidationRequested += HandleValidationRequested;
        messageStore = new(editContext);

    }

    private void HandleValidationRequested(object? sender, ValidationRequestedEventArgs args)
    {
        // Clear previous errors
        feedback = "";
        errors.Clear();
        messageStore?.Clear();
    }

    private void SaveProduct() 
    {
        // feedback = "AddProduct requested";
        // Clear all messages
        feedback = "";
        errors.Clear();
        messageStore?.Clear();

        try
        {
            // Verify that there are not validation errors
            if (editContext!.Validate()) 
            {
                // Verify a valid category is selected
                if (Model!.CategoryID == 0)
                {
                    messageStore?.Add(() => Model.CategoryID, "You must select a category");
                }
                // Verify a valid supplier is selected
                if (Model!.SupplierID == 0)
                {
                    messageStore?.Add(() => Model.SupplierID, "You must select a supplier");
                }
                // Verify that there are no validation messages
                if (editContext.GetValidationMessages().Any()) 
                {
                    // Notify editContext that validation state has changed
                    editContext.NotifyValidationStateChanged();
                }
                else
                {
                    // Check if add or update is requested
                    if (Model!.ProductID == 0) 
                    {
                        // Add Product to the database
                        int newProductId = CurrentProductServices!.AddProduct(Model);
                        feedback = $"Successfully added new product with id {newProductId}";
                    }
                    else
                    {
                        // Update Product in the database
                        CurrentProductServices!.UpdateProduct(Model);
                        feedback = $"Successfully updated product";
                    }

                }
            }

        }
        catch(ArgumentNullException ex) 
        {
            errors.Add($"Missing Data: {GetInnerException(ex).Message}");
        }
        catch (ArgumentException ex)
        {
            errors.Add($"Data Issue: {GetInnerException(ex).Message}");
        }
        catch (Exception ex)
        {
            errors.Add($"System Error: {GetInnerException(ex).Message}");
        }
    }

    // private void UpdateProduct()
    // {
    //     feedback = "UpdateProduct requested";
    // }

    private async Task DeleteProduct()
    {
        //feedback = "DeleteProduct requested";
        if (Model!.Discontinued) 
        {
            if (await CurrentJSRuntime!.InvokeAsync<bool>("confirm", "Are you sure you want to activate this product?"))
            {
                try
                {
                    Model!.Discontinued = false;
                    CurrentProductServices!.UpdateProduct(Model);
                    await CurrentJSRuntime!.InvokeVoidAsync("alert", "Product has been activated");
                }
                catch (Exception ex)
                {
                    errors.Add(GetInnerException(ex).Message);
                }
            }
        }
        else
        {
            if (await CurrentJSRuntime!.InvokeAsync<bool>("confirm", "Are you sure you want to delete this product?"))
            {
                try
                {
                    CurrentProductServices!.DiscontinueProduct(Model!.ProductID);
                    await CurrentJSRuntime!.InvokeVoidAsync("alert", "Product has been discontinued");
                }
                catch (Exception ex)
                {
                    errors.Add(GetInnerException(ex).Message);
                }
            }
        }

    }

    private async Task CancelEdit() 
    {
        // feedback = "CancelEdit requested";
        if (await CurrentJSRuntime!.InvokeAsync<bool>("confirm","Are you sure you want to cancel edit?"))
        {
            //ClearForm();
            CurrentNavigationManager!.NavigateTo("/products/crud");
        }
    }

    private void ClearForm()
    {
        feedback = "ClearForm requested";
        // isClearing = true;
        feedback = "";
        errors.Clear();
        Model = new();
    }

    private Exception GetInnerException(Exception ex)
    {
        while (ex.InnerException != null)
            ex = ex.InnerException;
        return ex;
    }

}
